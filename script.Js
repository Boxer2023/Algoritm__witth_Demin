
Задача 1 
Описать структуру входных и выходных данных для задачи про "Волка, козу и капусту". 
Что должно прийти на вход и что может быть результатом функции shipping()? Необходимо 
передать данные, которые позволяют алгоритму понять, какой состав животных и продуктов 
предстоит перевезти и кто или что из них является пищей для других. Писать алгоритм не 
нужно. В качестве результата нужно определить структуру данных, которая позволит 
перевозчику понять, кого в какой момент нужно перевозить.

Решение задачи логического плана, известной как "задача о перевозке через реку". 

Моя последовательность действий. 

0. С помощью некого вид сортировки, основанного на характеристиках перевозимых 
объектов (в данном случае, на их пищевых привычках), разделяем травоядных от хищников. 
1. Перевозим волка с одного берега на другой. 
2. Возвращаемся, забираем капусту и перевевозим с одного берега на другой. 
3. Возвращаемся, забираем козу и перевевозим с одного берега на другой. 
4. Все в сборе на другом берегу реки.

Мое решение включает в себя сортировку объектов и последующую перевозку в такой
последовательности, чтобы избежать конфликтов. Путем разделения объектов на хищников 
и травоядных, где возможно управляеть риском конфликтов, связанных с их пищевыми привычками.

_______________________________________________________________________________________________________

Задача 2
Написать алгоритм в виде блок-схемы или псевдокода следующей программы:
На вход в переменные x, y, z поступают 3 целых числа. Найти из них максимальное значение.

Решение задачи
Создаем блок-схему описание алгоритма с использованием псевдокода


1.Обьявляем переменные x, y, z с любым значением
2.Инициализировать переменную со значением max_value и присваеваем ей значение x
3.Сравниваем значение y с max_value
4.Если y больше max_value, присваеваем max_value значение y
5.Сравниваем значение z с max_value
6.Если z больше max_value, присваеваем max_value значение z
7.Выводим значение max_value




_______________________________________________________________________________________________________

Задача 3
Написать алгоритм в виде блок-схемы или псевдокода следующей программы:
На вход в переменные x, y, z поступают 3 целых числа. Определить, есть ли среди них хотя бы 2 одинаковых.

Решение задачи
Создаем блок-схему описание алгоритма с использованием псевдокода


1. Объявляем переменные x, y, z (целые числа)
2. Если x равно y или x равно z или y равно z, выполнить следующее:
      Вывести "Среди введенных чисел есть хотя бы два одинаковых."
      Если x равно y, 
            Вывести значения двух одинаковых чисел: x и y
      Если x равно z, 
            Вывести значения двух одинаковых чисел: x и z
      Если y равно z, 
            Вывести значения двух одинаковых чисел: y и z
3. Иначе:
      Вывести "Среди введенных чисел нет двух одинаковых."


_______________________________________________________________________________________________________

Задача 4
Написать алгоритм в виде блок-схемы или псевдокода следующей программы:
На вход поступает массив целых чисел. Нужно вернуть "инвертированный" массив - в котором элементы идут 
в обратном порядке. Доп. вопрос: рассчитать вычислительную сложность алгоритма.

Решение задачи
Создаем блок-схему описание алгоритма с использованием псевдокода


1. Создаем массива чисел 
2. Создаем новый пустой массив для инвертированного массива
3. Итерируем по исходному массиву в обратном порядке:
      Добавляем текущий элемент исходного массива в начало инвертированного массива
4. Возвращаем инвертированный массив

Рассчитываем вычислительную сложность алгоритма.
Сложность алгоритма O(n), потому, что мы проходимся по 
каждому элементу массива один раз, чтобы инвертировать его.



_______________________________________________________________________________________________________

Задача 4
Написать алгоритм в виде блок-схемы или псевдокода следующей программы:
На вход поступает отсортированный массив целых чисел. Определить, есть ли в нём одинаковае числа.
Примеры: [5, 7, 10, 10, 12, 18, 18] - да, [5, 7, 8, 10, 12, 13, 18] - нет
Доп. вопрос: рассчитать вычислительную сложность алгоритма.

Решение задачи
Создаем блок-схему описание алгоритма с использованием псевдокода


1. Создаем отсортированного массива чисел 
2. Итерируем по массиву сравнивая текущий элемент с предыдущим:
      Если текущий элемент равен предыдущему, вернуть "Да"
3. Если в ходе итерации не найдено одинаковых чисел, вернуть "Нет"

Рассчитываем вычислительную сложность алгоритма.
Сложность алгоритма O(n), потому, что мы проходимся по 
каждому элементу массива один раз, чтобы проверить наличие одинаковых чисел.
